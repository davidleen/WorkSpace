//将函数设置为extra属性中去，这样，加载这个.gradle就能调用此文件中定义的函数了
//这里可以自由定义

//打包的文件名
//安卓读书打包  需要改变这里的参数


ext {

    //打包时间
    assembleTime = {

        try {
            URLConnection uc = new URL("https://www.baidu.com/").openConnection();
            uc.connect();
            long d = uc.getDate();
            if(d ==0){
                return new Date().format("yyyy-MM-dd-HH-mm");
            }else{
                println new Date(d).format("yyyy-MM-dd-HH-mm").toString();
                return new Date(d).format("yyyy-MM-dd-HH-mm");
            }

        } catch (Throwable throwable) {
            println throwable.toString();
            return new Date().format("yyyy-MM-dd-HH-mm");
        }
    }



//供78打包修改路径使用
    getApkFileParentPath = "F:\\包存放地址android\\"
    getProductFilePath = {
        variant ->

//            if (variant.name.toLowerCase().contains("Andreader".toLowerCase())) {
//                return "安卓读书"+File.separator +"Andreader"+variant.versionName
//            }
//            if (variant.name.toLowerCase().contains("Changdu".toLowerCase())) {
//                return "畅读书城"+File.separator +"Changdu"+variant.versionName
//            }
//            if (variant.name.toLowerCase().contains("Abroad".toLowerCase())) {
//                return "畅读书城繁体"+File.separator+variant.versionName
//            }
            return "yunfeijiaju"

    }


    getFirstCharUpperCaseString = {
        String str ->
            if (str == "" || str.length() < 1 || str == null) {
                return "";
            } else {
                char[] ch = str.toCharArray();
                if (ch[0] >= 'a' && ch[0] <= 'z') {
                    ch[0] = (char) (ch[0] - 32);
                }
                return new String(ch);
            }
    }
// Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'x86': 4, 'x86_64': 5]
    //在gradle->tasks->other 找到这个任务，执行
    def moveApk = project.tasks.create("copyReleaseApkToCustomDir")
    moveApk.group('pack')
    //改变打出的包的 名称   增加版本号， 日期

    //修改导出包名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->

            if (variant.buildType.name == "debug") return

//            def abiName = output.getFilter(output.ABI)
//            if(abiName==null) abiName=""
//            println "abiName......" + abiName
//            output.versionCodeOverride = abiCodes.get(abiName, 99) * 100000 + variant.versionCode
//            println " output.versionCodeOverride......" + output.versionCodeOverride

            def outputFile = output.outputFile

//             def remainPart = getProductFilePath()+"_"+outputFile.name.substring(outputFile.name.indexOf('-') + 1, outputFile.name.lastIndexOf('.apk'))
//
//
//
//            fileName = "${remainPart}_${assembleTime()}_v${variant.versionName}_${variant.versionCode}.apk"
            fileName =  getProductFilePath()+"_"+"${variant.versionCode}.apk"

            println "rename apk......" + fileName
            //设置输出的文件名
            outputFileName = fileName


            //输出路径
            def newOutFileDirectory = getApkFileParentPath + getProductFilePath(variant)

            //建立任务，在assemble 完成后， 移动apk文件到指定文件夹
            def task = project.tasks.create("copyAndRename${variant.name}Apk", Copy)
            println "=============Copying " + outputFileName + " to apk directory:" + newOutFileDirectory
            task.from(output.outputFile)
            task.into(newOutFileDirectory)
            println "==============Change apk  file path and name Done========"
            //这个任务依赖于编译， 执行这个任务，必然触发assemble
            task.dependsOn variant.assemble
            moveApk.dependsOn task

        }
    }




}






