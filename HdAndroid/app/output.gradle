
//将函数设置为extra属性中去，这样，加载这个.gradle就能调用此文件中定义的函数了
//这里可以自由定义

//打包的文件名
//安卓读书打包  需要改变这里的参数




ext {








//供78打包修改路径使用
    getApkFileParentPath="D:\\包存放地址android\\"
    getProductFilePath = {
        variant ->

            return "yunfeijiaju"

    }


    getFirstCharUpperCaseString = {
        String str->
            if (str =="" || str.length() <1 || str == null){
                return "";
            }else {
                char[] ch = str.toCharArray();
                if (ch[0] >= 'a' && ch[0] <= 'z') {
                    ch[0] = (char) (ch[0] - 32);
                }
                return new String(ch);
            }
    }

    //在gradle->tasks->other 找到这个任务，执行
    def moveApk = project.tasks.create("copyReleaseApkToCustomDir")
    //改变打出的包的 名称   增加版本号， 日期

    //修改导出包名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->

            if (variant.buildType.name == "debug") return

                def outputFile = output.outputFile

                    def remainPart = outputFile.name.substring(outputFile.name.indexOf('-') + 1, outputFile.name.lastIndexOf('.apk'))
                    // 输出apk名称为changdu-unsigned_v1.0_2015-01-15-12-33.apk
                    remainPart = getFirstCharUpperCaseString(remainPart)
                    println '=======================' + variant.name
                    def adSuffix = isUserAdModule?"":"_noAd"
            def suffix360 = isPack360 ? "_360" : ""
            def fileName
            if(remainPart.contains("Abroad"))//海外包改apk文件名字
            {
                remainPart=   remainPart.replace("Abroad","eReader");
                fileName = "${remainPart}_${assembleTime()}${adSuffix}${suffix360}_v${variant.versionName}_${variant.versionCode}.apk"

            }else
                fileName = "${remainPart}_v${variant.versionName}_${assembleTime()}${adSuffix}${suffix360}.apk"

            println "rename apk......" + fileName
            //设置输出的文件名
            outputFileName = fileName


            def newOutFileDirectory
            def productFilePath = getProductFilePath(variant)

                        if (isPack360){
                newOutFileDirectory = getApkFileParentPath + productFilePath  + getRealVersionName

                        }else{
                newOutFileDirectory = getApkFileParentPath + productFilePath
                        }

            //建立任务，在assemble 完成后， 移动apk文件到指定文件夹
            def task = project.tasks.create("copyAndRename${variant.name}Apk", Copy)
            println "=============Copying " + outputFileName + " to apk directory:" + newOutFileDirectory
            task.from(output.outputFile)
            task.into(newOutFileDirectory)
            println "==============Change apk  file path and name Done========"
            //这个任务依赖于编译， 执行这个任务，必然触发assemble
            task.dependsOn variant.assemble
            moveApk.dependsOn task

                    }
    }



}






