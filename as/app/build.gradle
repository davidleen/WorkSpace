apply plugin: "com.android.application"
apply from: 'local.gradle'


android {
    compileSdkVersion project.ANDROID_COMPILE_VERSION
    buildToolsVersion project.ANDROID_BUILD_VERSION
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    defaultConfig {
        applicationId "com.rnmap_wb"
        minSdkVersion project.ANDROID_MIN_VERSION
        targetSdkVersion project.ANDROID_TARGET_VERSION
        manifestPlaceholders = [ANDROID_SUPPORT_VERSION: "${ANDROID_SUPPORT_V7_VERSION}"]
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    signingConfigs {


        release {

                keyAlias myKeyAlias
                keyPassword myKeyPassword
                storeFile file(myStoreFileName)
                storePassword myStorePassword

        }
    }
    buildTypes {
        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
//    // applicationVariants are e.g. debug, release
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            // For each separate APK per architecture, set a unique version code as described here:
//            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
//            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
//            def abi = output.getFilter(OutputFile.ABI)
//            if (abi != null) {  // null for the universal-debug, universal-release variants
//                output.versionCodeOverride =
//                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
//            }
//        }
//    }
}

dependencies {

    api 'com.android.support:multidex:1.0.1'
    api "com.android.support:support-compat:${ANDROID_SUPPORT_V4_VERSION}"
    api "com.android.support:support-core-utils:${ANDROID_SUPPORT_V4_VERSION}"//
    api "com.android.support:support-annotations:${ANDROID_SUPPORT_V4_VERSION}"
    api "com.android.support:appcompat-v7:${ANDROID_SUPPORT_V7_VERSION}"
    api "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_V7_VERSION}"

//    compile "com.google.android.gms:play-services-maps:${PLAY_SERVICES_MAPS_VERSION}"
    api project(':frame')
    api project(':dao')
    api project(':domain')
//    api project(':map_library')
    api('com.github.hotchemi:permissionsdispatcher:3.2.0') {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-compat"
        //  exclude module: "support-compat"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.2.0"
    compile "com.jakewharton:butterknife:${BUTTERKNIFE_VERSION}"



    compile('com.nostra13.universalimageloader:universal-image-loader:1.9.4') {
        exclude group: 'com.android.support'
    }
    compile 'org.osmdroid:osmdroid-android:6.0.3'
    api project(':OSMBonusPack')


    //数据库查看工具
    debugCompile 'com.facebook.stetho:stetho:1.5.0'
}

